// LeftView.cpp: implementación de la clase CLeftView
//

#include "stdafx.h"
#include "ImmunityDebugger.h"

#include "ImmunityDebuggerDoc.h"
#include "LeftView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CLeftView

IMPLEMENT_DYNCREATE(CLeftView, CTreeView)

BEGIN_MESSAGE_MAP(CLeftView, CTreeView)
END_MESSAGE_MAP()


// Construcción o destrucción de CLeftView

CLeftView::CLeftView()
{
	// TODO: agregar aquí el código de construcción
}

CLeftView::~CLeftView()
{
}

BOOL CLeftView::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: modificar aquí la clase Window o los estilos cambiando CREATESTRUCT cs

	return CTreeView::PreCreateWindow(cs);
}

void CLeftView::OnInitialUpdate()
{
	CTreeView::OnInitialUpdate();

	// TODO: puede rellenar TreeView con elementos obteniendo acceso directamente
	//  a través de una llamada a GetTreeCtrl().
	/*CWnd * w = this->GetParent()->GetParent();

	TCHAR text[100];

	CString wText;
	w->GetWindowText(wText);
	GetClassName(w->m_hWnd,text,100);

	w->SetWindowText("CPU");
	w->ShowWindow(SW_SHOWMAXIMIZED);*/
}


// Diagnósticos de CLeftView

#ifdef _DEBUG
void CLeftView::AssertValid() const
{
	CTreeView::AssertValid();
}

void CLeftView::Dump(CDumpContext& dc) const
{
	CTreeView::Dump(dc);
}

CImmunityDebuggerDoc* CLeftView::GetDocument() // La versión de no depuración es en línea
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CImmunityDebuggerDoc)));
	return (CImmunityDebuggerDoc*)m_pDocument;
}
#endif //_DEBUG


// Controladores de mensaje de CLeftView
