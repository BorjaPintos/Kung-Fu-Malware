// ChildFrm.cpp: implementación de la clase CChildFrame
//
#include "stdafx.h"
#include "ImmunityDebugger.h"

#include "ChildFrm.h"
#include "LeftView.h"
#include "NewView.h"
#include "ImmunityDebuggerView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CChildFrame

IMPLEMENT_DYNCREATE(CChildFrame, CMDIChildWnd)

BEGIN_MESSAGE_MAP(CChildFrame, CMDIChildWnd)
	ON_UPDATE_COMMAND_UI_RANGE(AFX_ID_VIEW_MINIMUM, AFX_ID_VIEW_MAXIMUM, &CChildFrame::OnUpdateViewStyles)
	ON_COMMAND_RANGE(AFX_ID_VIEW_MINIMUM, AFX_ID_VIEW_MAXIMUM, &CChildFrame::OnViewStyle)
END_MESSAGE_MAP()


// Construcción o destrucción de CChildFrame

CChildFrame::CChildFrame()
{
	// TODO: agregar aquí el código de inicialización de miembros
}

CChildFrame::~CChildFrame()
{
}

BOOL CChildFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext)
{
	/*CView* pNewView = (CView*) new CNewView;

	if (NULL == pNewView)
		return FALSE;

	CRect rect(0,0,0,0);
	UINT viewID = AFX_IDW_PANE_FIRST+1;
	pNewView->Create(_T("ACPU"),_T("CPU"),WS_CHILD|WS_VISIBLE|WS_MAXIMIZE,rect,AfxGetMainWnd(),viewID,pContext);*/
	//pNewView->SendMessage(WM_INITIALUPDATE,0,0);
	// Crear ventana divisora
	if (!m_wndSplitter.CreateStatic(this, 1, 2))
		return FALSE;

	if (!m_wndSplitter.CreateView(0, 0, RUNTIME_CLASS(CLeftView), CSize(100, 100), pContext) ||
		!m_wndSplitter.CreateView(0, 1, RUNTIME_CLASS(CImmunityDebuggerView), CSize(100, 100), pContext))
	{
		m_wndSplitter.DestroyWindow();
		return FALSE;
	}
	return TRUE;
}

BOOL CChildFrame::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: modificar aquí la clase Window o los estilos cambiando CREATESTRUCT cs
	
	cs.lpszName=_T("CPU");

	if( !CMDIChildWnd::PreCreateWindow(cs) )
		return FALSE;
	//cs.style= cs.style | WS_MAXIMIZE;
	LPCTSTR pszClassName = _T("ACPU");
	WNDCLASS wndcls;
	if (!::GetClassInfo(AfxGetInstanceHandle(),pszClassName,&wndcls))
	{
		GetClassInfo(AfxGetInstanceHandle(),cs.lpszClass,&wndcls);
		//VERIFY();
		
		wndcls.lpszClassName=pszClassName;

		LPCTSTR pszIcon = MAKEINTRESOURCE(IDR_ImmunityDebuggeTYPE);
		HINSTANCE hInst = AfxFindResourceHandle(pszIcon,ATL_RT_GROUP_ICON);
		_ASSERTE(hInst!=NULL);
		wndcls.hIcon= ::LoadIcon(hInst,pszIcon);
		if (!::RegisterClass(&wndcls))
		{
			return FALSE;
		}
	}
	cs.lpszClass=pszClassName;
	cs.style = cs.style|WS_MAXIMIZE;
	
	return TRUE;
}


// Diagnósticos de CChildFrame

#ifdef _DEBUG
void CChildFrame::AssertValid() const
{
	CMDIChildWnd::AssertValid();
}

void CChildFrame::Dump(CDumpContext& dc) const
{
	CMDIChildWnd::Dump(dc);
}

#endif //_DEBUG


// Controladores de mensaje de CChildFrame
CImmunityDebuggerView* CChildFrame::GetRightPane()
{
	CWnd* pWnd = m_wndSplitter.GetPane(0, 1);
	CImmunityDebuggerView* pView = DYNAMIC_DOWNCAST(CImmunityDebuggerView, pWnd);
	return pView;
}

void CChildFrame::OnUpdateViewStyles(CCmdUI* pCmdUI)
{
	if (!pCmdUI)
		return;

	// TODO: personalizar o ampliar este código para controlar las elecciones en el menú Ver.
	CImmunityDebuggerView* pView = GetRightPane(); 

	// Si el panel de la derecha no se ha creado o no es una vista, deshabilitar los comandos de nuestro intervalo
	if (pView == NULL)
		pCmdUI->Enable(FALSE);
	else
	{
		DWORD dwStyle = pView->GetStyle() & LVS_TYPEMASK;
		// Si el comando es ID_VIEW_LINEUP, habilitar sólo el comando
		// cuando esté activo el modo LVS_ICON o LVS_SMALLICON
		if (pCmdUI->m_nID == ID_VIEW_LINEUP)
		{
			if (dwStyle == LVS_ICON || dwStyle == LVS_SMALLICON)
				pCmdUI->Enable();
			else
				pCmdUI->Enable(FALSE);
		}
		else
		{
			// De lo contrario, utilizar puntos para reflejar el estilo de la vista
			pCmdUI->Enable();
			BOOL bChecked = FALSE;

			switch (pCmdUI->m_nID)
			{
			case ID_VIEW_DETAILS:
				bChecked = (dwStyle == LVS_REPORT);
				break;

			case ID_VIEW_SMALLICON:
				bChecked = (dwStyle == LVS_SMALLICON);
				break;

			case ID_VIEW_LARGEICON:
				bChecked = (dwStyle == LVS_ICON);
				break;

			case ID_VIEW_LIST:
				bChecked = (dwStyle == LVS_LIST);
				break;

			default:
				bChecked = FALSE;
				break;
			}

			pCmdUI->SetRadio(bChecked ? 1 : 0);
		}
	}
}

void CChildFrame::OnViewStyle(UINT nCommandID)
{
	// TODO: personalizar o ampliar este código para controlar las elecciones en el menú Ver.
	CImmunityDebuggerView* pView = GetRightPane();

	// Si el panel de la derecha se ha creado y es una clase CImmunityDebuggerView, procesar los comandos de menú...
	if (pView != NULL)
	{
		int nStyle = -1;

		switch (nCommandID)
		{
		case ID_VIEW_LINEUP:
			{
				// Solicitar que el control de lista se ajuste a la cuadrícula
				CListCtrl& refListCtrl = pView->GetListCtrl();
				refListCtrl.Arrange(LVA_SNAPTOGRID);
			}
			break;

		// Otros comandos cambian el estilo en el control de lista
		case ID_VIEW_DETAILS:
			nStyle = LVS_REPORT;
			break;

		case ID_VIEW_SMALLICON:
			nStyle = LVS_SMALLICON;
			break;

		case ID_VIEW_LARGEICON:
			nStyle = LVS_ICON;
			break;

		case ID_VIEW_LIST:
			nStyle = LVS_LIST;
			break;
		}

		// Cambiar el estilo; la ventana se volverá a dibujar automáticamente
		if (nStyle != -1)
			pView->ModifyStyle(LVS_TYPEMASK, nStyle);
	}
}
