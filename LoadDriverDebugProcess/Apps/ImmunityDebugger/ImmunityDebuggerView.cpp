// ImmunityDebuggerView.cpp: implementación de la clase CImmunityDebuggerView
//

#include "stdafx.h"
#include "ImmunityDebugger.h"

#include "ImmunityDebuggerDoc.h"
#include "ImmunityDebuggerView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CImmunityDebuggerView

IMPLEMENT_DYNCREATE(CImmunityDebuggerView, CListView)

BEGIN_MESSAGE_MAP(CImmunityDebuggerView, CListView)
	ON_WM_STYLECHANGED()
END_MESSAGE_MAP()

// Construcción o destrucción de CImmunityDebuggerView

CImmunityDebuggerView::CImmunityDebuggerView()
{
	// TODO: agregar aquí el código de construcción

}

CImmunityDebuggerView::~CImmunityDebuggerView()
{
}

BOOL CImmunityDebuggerView::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: modificar aquí la clase Window o los estilos cambiando
	//  CREATESTRUCT cs

	return CListView::PreCreateWindow(cs);
}

void CImmunityDebuggerView::OnInitialUpdate()
{
	CListView::OnInitialUpdate();


	// TODO: puede rellenar ListView con elementos obteniendo acceso directamente
	//  a su control de lista mediante una llamada a GetListCtrl().
	CWnd * w = this->GetParent();

	bool found = false;

	while (w && !found)
	{
		TCHAR text[100];

		CString wText;
		w->GetWindowText(wText);
		GetClassName(w->m_hWnd,text,100);
		if (!strcmp(text,"ACPU"))
		{
			//w->SetWindowText("CPU");
			w->ShowWindow(SW_SHOWMAXIMIZED);
			found = true;
		}
		else
		{
			w = w->GetParent();
		}
	}
}


// Diagnósticos de CImmunityDebuggerView

#ifdef _DEBUG
void CImmunityDebuggerView::AssertValid() const
{
	CListView::AssertValid();
}

void CImmunityDebuggerView::Dump(CDumpContext& dc) const
{
	CListView::Dump(dc);
}

CImmunityDebuggerDoc* CImmunityDebuggerView::GetDocument() const // La versión de no depuración es en línea
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CImmunityDebuggerDoc)));
	return (CImmunityDebuggerDoc*)m_pDocument;
}
#endif //_DEBUG


// Controladores de mensaje de CImmunityDebuggerView
void CImmunityDebuggerView::OnStyleChanged(int nStyleType, LPSTYLESTRUCT lpStyleStruct)
{
	//TODO: agregar código para que el usuario cambie el estilo de vista de la ventana	
	CListView::OnStyleChanged(nStyleType,lpStyleStruct);	
}
